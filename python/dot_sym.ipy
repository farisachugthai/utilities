#!/usr/bin/env ipython3
# -*- coding: utf-8 -*-
# Maintainer: Faris Chugthai
# TODO: Test script. Also check if it'd be better to put the docstring in main
# in the module docstring.

import os
import re
import sys

import .sys_checks

# Global vars
HOME = os.path.join(os.path.expanduser("~"), "")
PROJ = os.path.join(home, "projects")
REPO = os.path.join(proj, "dotfiles")


def get_dotfiles():
    try:
        os.chdir(proj)
    # https://docs.python.org/3/library/exceptions.html#NotADirectoryError
    except NotADirectoryError as e:
        os.makedirs(proj) and os.chdir(proj) or sys.exit("Couldn't create the necessary directory.")

    os.system("git clone git@github.com:farisachugthai/dotfiles.git")


def dir_checker():
    for root, dirs, files in os.walk(repo):
        # Now lets do the folder check
        if not os.path.isdir(root):
            os.makedirs(root, exist_ok=False)


def backup_prompt():
    res = input("Would you like to back up this file?")
    answ = re.compile("^[Yy]*")
    # TODO: Check how to do this part right.
    if res = "y*":
        backup_file()
# import it you've definitely written this before
    elif res = "n*":
        pass
    else:
        print("I'm sorry i don't understand.")


def symlink_repo(file):
    '''
    Symlink the dotfiles if nothing exists in the home directory.
    '''

    src = os.path.join(repo, file)
    dest = os.path.join(home, file)
    try:
        os.symlink(src, dest)
    except FileExistsError:
        if os.path.islink(dest):
            # print("Sorry but a symlink to {0} already exists".format(dest))
            pass
        elif os.path.isfile(dest):
            print("Sorry but a file to {0} already exists".format(dest))
            backup_prompt()

def main():
    '''
    Clone dotfiles to a user's home directory and then symlink to the repo.
    Assumes Linux only because it has only been tested on Ubuntu and Termux.
    Maintained by Faris Chugthai
    '''

    sys_checks()
    #  if os.uname()[0] != 'Linux':
    #      raise OSError("This script assumes a Linux operating system.")
    #      sys.exit()

    # let's get the files we need
    get_dotfiles()

    # ensure all necessary directories are in $HOME
    dir_checker()

    # symlink every file you can find
    repo_files = !git ls-files
    for file in repo_files:
        symlink_repo(file)

if __name__ == '__main__':
    main()
